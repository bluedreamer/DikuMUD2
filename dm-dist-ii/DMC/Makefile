# The makefile this makefile includes
MAKEFILE =	Makefile.linux

# You may have to change the use of include, ifneq, and endif to fit your make.
#
# Oct 22, 1993 [gnort] : Did a major overhaul of Makefile.
# Jun 25, 1994 [gnort] : And another one.
# Feb 03, 1995 [gnort] : Split the makefile into architecture dependant parts.
#
# After adding/changing #include's in sourcefiles or adding new sourcefiles:
# > make depend
#
# If make complains about a file `.depends' not present:
# > touch .depends ; make depend
#
# NOTE!!  Using lex instead of flex may cause severe grief, if you forget
# to change the declaration in dmcpar.y from *yytext to yytext[] as well!!

#
#
#  Set the flag "-DMUD_DEBUG" to get full memory debug, type checks,
#     and command / sfun history.
#


#SYSFLAGS	=	-DBITCONV
SYSFLAGS	=	-DMUD_DEBUG -DMEMCHECK -DMEMORY_DEBUG -pipe
#SYSFLAGS        =       -DPROFILE -pg

SERVER	=	dmserver

include $(MAKEFILE)

LEXFILTER=	| perl lexfilter $(SYSPORT) # Got to filter lex for bad code

LINK.cpp=	$(CPP) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS)
LINK.c	=	$(LD) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS)

DEBUG	=	-g # -O6

CFL	=	$(DEBUG) $(SYSPORT) $(SYSFLAGS) $(EXTRA_CFLAGS) 
CFLAGS	=	-DDMC_SRC -I .. $(CFL) -pedantic -Wall -Wno-unused -Wno-variadic-macros -Wno-format-overflow -Wno-stringop-truncation -Wno-register
CPPFLAGS	=	$(CFLAGS)

# (f)lex/yacc/bison generated c-files are notorious for their lousy C
# hence, no warnings...
CFLAGS2	= 	$(CFL) -Wno-register

YFLAGS	=	-d -v 	# y.tab.h generator, and verbose output

LDLIBS	=	$(EXTRA_LDLIBS)
#LDFLAGS	=	-static

OPT	=	#-O2 	# -O might be a good idea, but we have a tough time
                        # just getting the show on the road. :)

# SOURCES

# all .cpp files used by Makefile (including files generated by lex/yacc)
SRCS	=	$(SERV_SRCS) $(DMC_SRCS) $(DIL_SRCS) $(BLKT_SRCS) $(MPLEX_SRCS)

# c-files for dmc
DMC_SRCS = dmc.cpp dmc_process.cpp tmp_dmcpar.cpp \
  tmp_dmclex.cpp utility.cpp string.cpp structs.cpp

# OBJECTS

DMC_OBJS  =	$(DMC_SRCS:.cpp=.o)  dmc_db_file.o dmc_money.o

   # ------------------------------ oOoOoOo ------------------------------ #

all:	dmc

clean:
	-rm -f *.o tmp_* dmc core

# Need to get the tmp_*.cpp files into .depends as well
depend:	tmp_dmcpar.cpp tmp_dmclex.cpp
	@echo Updating dependencies...
	@$(MKDPND) -I .. $(SRCS) > .depends
	@echo Done.

DIFFOPT	=	--ignore-all-space --ignore-blank-lines --context --new-file \
		--exclude-from=.patch_exclude

diff:
	@echo Remember, 1 is diff\'s normal exit-value...
	-$(DIFF) $(DIFFOPT) old_src . > Valhalla.patch

TAGS:	$(SERV_SRCS) $(SERV_HDRS) # Only tags for server...
	@echo Building TAGS file....
	@etags $(SERV_SRCS) $(SERV_HDRS)
	@echo Done.

#zones:	data
#.if $(ZONEDIR) != "zon/"
#	# Only copy if ZONEDIR is not the dir to copy from!
#	@cp zon/*.reset zon/*.data zon/zonelist $(ZONEDIR)
#.endif
#
backup:
	tar cvf - *.[chly] | gzip -9 >! dikusrc.tgz
	tar cvf - Makefile TODO distfile | gzip -9 >! dikumisc.tgz
	tar cvf - zon/* | gzip -9 >! dikuzon.tgz
	tar cvf - lib/link/* | gzip -9 >! dikulib.tgz

src:
	tar cf - *.[chly] Filelist Makefile.* TODO TODO.gnort .patch_exclude \
          lexfilter sign addheader pack.perl list.perl \
          | gzip -1 > Src.tgz

# The definition below says that dmc is to search for #include <name> files
# in the directory where it is compiled. If you want it elsewhere, or
# the construction below gives you trouble on some machines, you might simply
# make DMC_PWD a null-macro and and set the macro in dmc.h

DMC_PWD=      # If you prefer to set CPPI in dmc.h
#DMC_PWD=-DCPPI=\"`pwd`\"

dmc:	$(DMC_OBJS)
	$(LINK.cpp) $(OPT) $(DMC_OBJS) ../namelist.o ../common.o \
        ../memory.o ../textutil.o ../extra.o ../bytestring.o -o $@ $(LDLIBS)

# All tmp_* files could/should be deleted along with *.o files

tmp_dmcpar.cpp tmp_dmcpar.h:	dmcpar.y
	$(YACC) $(YFLAGS) dmcpar.y
	@-if [ -f y.output ]; then mv y.output tmp_dmcpar.output; fi
	@mv y.tab.c tmp_dmcpar.cpp
	@mv y.tab.h tmp_dmcpar.h
tmp_dmcpar.o:	tmp_dmcpar.cpp
	$(CPP) -I .. $(OPT) $(CFLAGS2) -c tmp_dmcpar.cpp
tmp_dmclex.cpp:	dmclex.l
	$(LEX) -t dmclex.l $(LEXFILTER) > tmp_dmclex.cpp
tmp_dmclex.o:	tmp_dmclex.cpp
	$(CPP) -I .. $(OPT) $(CFLAGS2) -c tmp_dmclex.cpp

# dmc_db_file.o is dependant on db_file.o to inherit its dependencies...
# This may mean that db_file.cpp is compiled twice when not needed, but hey!
dmc_db_file.o:	db_file.cpp
	$(CPP) $(OPT) $(CFLAGS) -c db_file.cpp -o $@

# This version of money is different from money.o in that it is much smaller
dmc_money.o:	money.cpp
	$(CPP) $(CFLAGS) -c money.cpp -o $@


#.include ".depends"		# For `normal' make
include .depends		# For gnu-make
