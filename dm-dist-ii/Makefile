# The makefile this makefile includes
MAKEFILE =	Makefile.linux

# You may have to change the use of include, ifneq, and endif to fit your make.
#
# Oct 22, 1993 [gnort] : Did a major overhaul of Makefile.
# Jun 25, 1994 [gnort] : And another one.
# Feb 03, 1995 [gnort] : Split the makefile into architecture dependant parts.
#
# After adding/changing #include's in sourcefiles or adding new sourcefiles:
# > make depend
#
# If make complains about a file `.depends' not present:
# > touch .depends ; make depend
#

#
#
#  Set the flag "-DMUD_DEBUG" to get full memory debug, type checks,
#     and command / sfun history.
#


SYSFLAGS	=	-pipe -DMUD_DEBUG -DMEMORY_DEBUG
# -DPROFILE -pg
#SYSFLAGS	=	-DBITCONV
#SYSFLAGS       =       -DPROFILE -pg

SERVER	=	dmserver

include $(MAKEFILE)

LEXFILTER=	| perl lexfilter $(SYSPORT) # Got to filter lex for bad code

LINK.cpp=	$(CPP) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS)
LINK.c	=	$(LD) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS)

DEBUG	=	-g

CFL	=	$(DEBUG) $(SYSPORT) $(SYSFLAGS) $(EXTRA_CFLAGS)
CFLAGS	=	$(CFL)   -Wall -Wno-unused -Wno-format-overflow -Wno-stringop-truncation -Wno-register
CPPFLAGS = $(CFLAGS)
# (f)lex/yacc/bison generated c-files are notorious for their lousy C
# hence, no warnings...
CFLAGS2	= 	$(CFL) -ansi

YFLAGS	=	-d -v 	# y.tab.h generator, and verbose output

LDLIBS	=	$(EXTRA_LDLIBS)
#LDFLAGS	=	-static

OPT	=	#-O6 	# -O might be a good idea, but we have a tough time
                        # just getting the show on the road.   :)

# SOURCES

# all .cpp files used by Makefile (including files generated by lex/yacc)
SRCS	=	$(SERV_SRCS)

# c-files for server
SERV_SRCS = account.cpp act_change.cpp act_comm.cpp act_info.cpp act_movement.cpp\
  act_obj1.cpp act_obj2.cpp act_obj3.cpp act_offensive.cpp act_other.cpp act_skills.cpp\
  act_social.cpp act_wizard.cpp act_wstat.cpp affect.cpp apf_affect.cpp ban.cpp\
  bank.cpp blkfile.cpp board.cpp comm.cpp common.cpp constants.cpp convert.cpp create.cpp db.cpp\
  db_file.cpp db_utils.cpp demigod.cpp destruct.cpp dictionary.cpp dijkstra.cpp main.cpp \
  eliza.cpp experience.cpp fight.cpp files.cpp guild.cpp handler.cpp help.cpp act_look.cpp \
  hometown.cpp interpreter.cpp justice.cpp limits.cpp magic.cpp magic1.cpp magic2.cpp \
  memory.cpp mobact.cpp modify.cpp money.cpp nanny.cpp nice.cpp pain.cpp pcsave.cpp \
  postoffice.cpp protocol.cpp queue.cpp reception.cpp shop.cpp signals.cpp skills.cpp \
  slime.cpp spec_assign.cpp spec_procs.cpp spell_parser.cpp str_parse.cpp string.cpp \
  swap.cpp sysport.cpp system.cpp teach.cpp textutil.cpp tif_affect.cpp trie.cpp utility.cpp \
  weather.cpp zon_basis.cpp zon_midgaard.cpp zon_wiz.cpp \
  zone_boot.cpp zone_reset.cpp namelist.cpp structs.cpp dilfld.cpp extra.cpp \
  dilinst.cpp dilexp.cpp dilrun.cpp dbfind.cpp competition.cpp unitfind.cpp combat.cpp \
  select.cpp persist.cpp bytestring.cpp config.cpp connectionlog.cpp

# h-files for server
SERV_HDRS = account.h affect.h ban.h blkfile.h comm.h common.h db.h db_file.h\
  dil.h files.h handler.h interpreter.h justice.h limits.h magic.h money.h \
  movement.h postoffice.h skills.h spells.h structs.h sysport.h \
  system.h textutil.h trie.h utils.h values.h

# OBJECTS

SERV_OBJS =	$(SERV_SRCS:.cpp=.o)

   # ------------------------------ oOoOoOo ------------------------------ #

all:	$(SERVER)
	@cd DMC;make all
	@cd DIL;make all
	@cd Mplex;make all
	@cd Utility;make all

spells:
	perl spellconvert.perl

$(SERVER):	$(SERV_OBJS)
	$(LINK.cpp) $(SERV_OBJS) -lcrypt -o $@

$(SERV_OBJS):
	$(CPP) -D DMSERVER $(OPT) $(CFLAGS) -c $(@:.o=.cpp) -o $@

clean:
	-rm -f *.o *.dh dmserver

realclean: clean
	@-rm -f $(SERVER)
	@cd DMC;make clean
	@cd DIL;make clean
	@cd Mplex;make clean
	@cd Utility;make clean
	@cd zon;rm -f *.data *.reset *.err
	@cd lib;rm -f swap.blk
	@rm -f core

package:
	@strip dmserver dmc dil mplex
	@tar cfvzh package.tgz dmserver dmc dil mplex values.h \
         wmacros.h composed.h base.h spelldef.h

# Need to get the tmp_*.cpp files into .depends as well
depend:	
	@echo Updating dependencies...
	@$(MKDPND) $(SRCS) > .depends
	@echo Done.

DIFFOPT	=	--ignore-all-space --ignore-blank-lines --context --new-file \
		--exclude-from=.patch_exclude

diff:
	@echo Remember, 1 is diff\'s normal exit-value...
	-$(DIFF) $(DIFFOPT) old_src . > Valhalla.patch

TAGS:	$(SERV_SRCS) $(SERV_HDRS) # Only tags for server...
	@echo Building TAGS file....
	@etags $(SERV_SRCS) $(SERV_HDRS)
	@echo Done.

data:
	DMC/dmc -m zon/*.zon zon/*.zon.Z

backup:
	tar cvf - *.[chly] | gzip -9 >! dikusrc.tgz
	tar cvf - Makefile TODO distfile | gzip -9 >! dikumisc.tgz
	tar cvf - zon/* | gzip -9 >! dikuzon.tgz
	tar cvf - lib/link/* | gzip -9 >! dikulib.tgz

src:
	tar cf - *.[chly] Filelist Makefile.* TODO TODO.gnort .patch_exclude \
            lexfilter sign addheader pack.perl list.perl \
          | gzip -1 > Src.tgz

#.include ".depends"		# For `normal' make
include .depends		# For gnu-make
