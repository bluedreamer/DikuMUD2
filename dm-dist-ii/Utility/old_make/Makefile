# The makefile this makefile includes
MAKEFILE =	Makefile.linux

# You may have to change the use of include, ifneq, and endif to fit your make.
#
# Oct 22, 1993 [gnort] : Did a major overhaul of Makefile.
# Jun 25, 1994 [gnort] : And another one.
# Feb 03, 1995 [gnort] : Split the makefile into architecture dependant parts.
#
# After adding/changing #include's in sourcefiles or adding new sourcefiles:
# > make depend
#
# If make complains about a file `.depends' not present:
# > touch .depends ; make depend
#

#
#
#  Set the flag "-DMUD_DEBUG" to get full memory debug, type checks,
#     and command / sfun history.
#


#SYSFLAGS	=	-DBITCONV
#SYSFLAGS	=	-DMUD_DEBUG
#SYSFLAGS        =       -DPROFILE -pg

include $(MAKEFILE)

LEXFILTER=	| perl lexfilter $(SYSPORT) # Got to filter lex for bad code

#LDFLAGS =       -static
LINK.cpp=	$(CPP) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS)
LINK.c	=	$(LD) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS)

DEBUG	=	-g -O2

CFL	=	-I .. $(DEBUG) $(SYSPORT) $(SYSFLAGS) $(EXTRA_CFLAGS)
CFLAGS	=	$(CFL) -pedantic -Wall -Wno-unused -Wno-variadic-macros
CPPFLAGS = -I..

# (f)lex/yacc/bison generated c-files are notorious for their lousy C
# hence, no warnings...
CFLAGS2	= 	$(CFL)

YFLAGS	=	-d -v 	# y.tab.h generator, and verbose output

LDLIBS	=	$(EXTRA_LDLIBS)

OPT	=	#-O2 	# -O might be a good idea, but we have a tough time
                # just getting the show on the road.   :)

# SOURCES

# all .c files used by Makefile (including files generated by lex/yacc)
SRCS	=	$(BLKT_SRCS) $(CSV2_SRCS) header.cpp $(ANALYSE_SRCS) \
                $(TUBORG_SRCS) verify.cpp $(CONANALYZE_SRCS)

ANALYSE_SRCS = analyse.cpp
CONANALYZE_SRCS = conanalyze.cpp
TUBORG_SRCS = tuborg.cpp

# c-files for blktest
BLKT_SRCS = blktest.cpp

# c-files for csv2guild
CSV2_SRCS = csv2guild.cpp

# OBJECTS

BLKT_OBJS       =	$(BLKT_SRCS:.cpp=.o)
CSV2_OBJS       =	$(CSV2_SRCS:.cpp=.o)
ANALYSE_OBJS    =	$(ANALYSE_SRCS:.cpp=.o)
CONANALYZE_OBJS =	$(CONANALYZE_SRCS:.cpp=.o)
TUBORG_OBJS     =	$(TUBORG_SRCS:.cpp=.o)


   # ------------------------------ oOoOoOo ------------------------------ #

all:	csv2 blktest header analyse conanalyze tuborg verify calc

analyse:$(ANALYSE_OBJS)
	$(LINK.c) $(ANALYSE_OBJS) -o $@ $(LDLIBS)

conanalyze:$(CONANALYZE_OBJS)
	$(LINK.c) $(CONANALYZE_OBJS) -o $@ $(LDLIBS)

tuborg:$(TUBORG_OBJS)
	$(LINK.c) $(TUBORG_OBJS) -o $@ $(LDLIBS)

header: header.cpp
	$(CPP) $(CFLAGS) header.cpp -o header

LEXFILTER=	| perl lexfilter $(SYSPORT) # Got to filter lex for bad code

tmp_calclex.cpp:   	calclex.l
	$(LEX) -t calclex.l $(LEXFILTER) > tmp_calclex.cpp
tmp_calclex.o:	tmp_calclex.cpp
	$(CC) -I .. $(OPT) $(CFLAGS2) -c tmp_calclex.cpp
tmp_calcpar.cpp tmp_calcpar.h:	calcpar.y
	$(YACC) $(YFLAGS) calcpar.y
	@-if [ -f y.output ]; then mv y.output tmp_calcpar.output; fi
	@mv y.tab.c tmp_calcpar.cpp
	@mv y.tab.h tmp_calcpar.h
tmp_calcpar.o:	tmp_calcpar.cpp
	$(CC) -I .. $(OPT) $(CFLAGS2) -c tmp_calcpar.cpp

calc:	tmp_calcpar.o tmp_calclex.o 
	$(LINK.c) $(OPT) tmp_calclex.o tmp_calcpar.o -o $@ $(LDLIBS)



verify: verify.cpp
	$(CPP) $(CFLAGS) verify.cpp -o verify

blktest:	$(BLKT_OBJS)
	$(LINK.c) $(BLKT_OBJS) ../blkfile.o ../utility.o ../textutil.o \
        ../memory.o ../files.o ../bytestring.o ../namelist.o ../extra.o\
        ../DMC/string.o ../DMC/structs.o ../DMC/dmc_db_file.o ../common.o -o $@

csv2:	$(CSV2_OBJS)
	$(LINK.c) $(CSV2_OBJS) -o $@

clean:
	-rm -f *.o analyse blktest csv2 verify tuborg core calc tmp_*

# Need to get the tmp_*.c files into .depends as well
depend:	
	@echo Updating dependencies...
	@$(MKDPND) $(SRCS) > .depends
	@echo Done.

DIFFOPT	=	--ignore-all-space --ignore-blank-lines --context --new-file \
		--exclude-from=.patch_exclude

diff:
	@echo Remember, 1 is diff\'s normal exit-value...
	-$(DIFF) $(DIFFOPT) old_src . > Valhalla.patch

TAGS:	$(SERV_SRCS) $(SERV_HDRS) # Only tags for server...
	@echo Building TAGS file....
	@etags $(SERV_SRCS) $(SERV_HDRS)
	@echo Done.

data:
	dmc -m zon/*.zon zon/*.zon.Z

#zones:	data
#.if $(ZONEDIR) != "zon/"
#	# Only copy if ZONEDIR is not the dir to copy from!
#	@cp zon/*.reset zon/*.data zon/zonelist $(ZONEDIR)
#.endif
#
backup:
	tar cvf - *.[chly] | gzip -9 >! dikusrc.tgz
	tar cvf - Makefile TODO distfile | gzip -9 >! dikumisc.tgz
	tar cvf - zon/* | gzip -9 >! dikuzon.tgz
	tar cvf - lib/link/* | gzip -9 >! dikulib.tgz

src:
	tar cf - *.[chly] Filelist Makefile.* TODO TODO.gnort .patch_exclude \
	  lexfilter sign addheader pack.perl list.perl \
	  | gzip -1 > Src.tgz

#.include ".depends"		# For `normal' make
include .depends		# For gnu-make


