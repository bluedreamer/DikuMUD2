  **************************************************************************
  *                                                                        * 
  *       Valhalla's Guide to Writing Your First Zone -- Version 2.0       *
  *    ----------------------------------------------------------------    *
  *        Revised (3-96) by Ryan Holliday (Kira) wrh2@po.cwru.edu         *
  *                                                                        *
  **************************************************************************

This Guide is a tutorial that is designed to introduce area building on
Valhalla Mud Engine.  In addition to this document you will
want to look at the other available docs which can be found at both
valhalla-usa.com and blinksoft.com.

This guide attempts to introduce area building by creating a tiny sample
world (with 2 rooms, 2 mobiles and 4 objects) with many added comments
to show a generalization which could be applied to your ideas.  Any
suggestions/comments should be sent to whistler@blinksoft.com


     ************************************************************


                Compiling and/or Uploading Your Zone


The Valhalla zone compiler is an actual compiler, very much unlike
DikuI base muds which view zones through an interpreter during runtime.
When you upload your zone to the /upload directory, it gets fed through to
the compiler.  A successful compilation will create two files,
filename.reset and filename.data.  These files are linked in with the mud
code at runtime and cannot be changed until a modification is compiled and
the mud is rebooted, or crashes.

The command to compile a zone is:

../bin/zonecomp zonename.zon

The zonecomp is a script that compiles the zone using the vmc, and moves the
data files the the zone directory so at next reboot the zones will be loaded
into the mud.  NOTE: The zonelist file in the etc directory must mention the
zonename in the list or it will not be booted.

     ************************************************************


                     Creating Your First Zone


Ok, so the rest of us want to see how to put together everything the other
docs say into one working zone!  In addition to this tutorial, you will
probably also want to have copies of the docs values.h, composed.h,
base.h, dil3.doc, and wmacros.h available.  These docs contain more
detailed information and contain many items that can be used to create a
truly unique and interesting zone.  For example, if you want to know a
specific race def for RACE_MONKEY, values.h is where to look, and if you
are interested in seeing how some macros work, like MSET_SPELLS, then you
can find help in wmacros.h.

We will now create a tiny zone with just a couple of rooms, mobiles and
objects.  The idea is that you see the basic format of any zone so you
can use information contained in the other docs to apply this format to
your ideas!

(NOTE from Kira) OK, this is where I've changed Icculus' tutorial around
a lot.  I will give you the complete code for each section of the zone,
followed by a section of comments which explain what each line of code
actually does.  Hopefully this will be somewhat easier to follow...

(NOTE) Every zone is made up of 6 sections:

   1) %zone    - Defines zone name and other zone-specific information.
   2) %dil     - Any special dil routines which you want to create for the
                 entire zone go here.  Please note the this section is NOT
                 discussed in this tutorial -- please refer to the dil3.doc
                 and Icculus' dil tutorial for more dil information.
   3) %rooms   - The room definitions are here.
   4) %mobiles - The mobile (monster) definitions are here.
   5) %objects - Objects are defined here.
   6) %reset   - (**Important**) Defines the way in which everything in
                 the zone resets and how (mobiles&objects) get loaded into
                 their assigned rooms.


     ***********************************************************


                           Tiny_Zone


(NOTE) Comments are added in C style, with a /* to indicate the start of
a multiline comment and */ to indicate the end.  Everything that follows
this will be actual zone file contents, except for the comments.

(NOTE) The first line of every zone file must have a password declaration
line.  As of 12-95, a header file was required on the actual mud, while a
line of a format /*pwd:password_here*/ was necessary on the test site.
You might want to check with the administration to see if any further
updates have been made to this system.

Even though technically the password line is just a comment, it is a very
important one and must have the first line all to itself.  Passwords are
assigned to debugged zones after being approved.


     ***********************************************************


/*pwd:this_is_my_password*/
#include <composed.h>
%zone tiny_zone
lifespan 20
reset RESET_ANYHOW
creators {"icculus", "venger"}

notes "What can I say but this will be short and probably not a
       very fun zone to adventure in!  Send all complaints to:
       Andrew Cowan agcowan@turing.uncg.edu."

help  "My, what a tiny zone you're in!  Beware the death room,
       it's been said that visitors to this room often find
       things mildly uncomfortable."


/*   ***********************************************************   */

/*
   #include <composed.h>

     This command will tell the compiler that you want all of the
     information contained within the composed.h doc to be applicable
     to your zone.  Composed.h is a header file which contains
     definitions for previously defined mobiles which you will need for
     your zone.

     (NOTE) The composed.h file has two #include calls within it, one for
     values.h and another for wmacros.h.  These two files contain very
     important definitions and must be included in your zone!  If you have
     no need for including composed.h, then you must include the other two
     explicitly.

   %zone tiny_zone

     The above does two things.  %zone is a label that tells the compiler
     that you are defining information for the zone section of your zone.
     The first string that follows this label is your zone name.  The zone
     we are creating will be called tiny_zone.  This name is important
     because everything in the zone can be referenced as object@tiny_zone
     or object@tiny_zone.  It is best to use lower case characters for your
     zone name, as upper case is slightly more difficult to deal with.

     It is recommended that as a convention you use your zone-name as the
     zone filename with a .zon extension (Must always have .zon extension
     or the compiler will not understand what to do).  So for our zone, we
     would name this file tiny_zone.zon.

   lifespan 20

     The lifespan call simply defines the zone life for tiny_zone.  In
     this case tiny_zone wants to reset every 20 minutes.

   reset RESET_ANYHOW

     The reset call defines how this zone reset is made.  In our case
     we will reset every 20 minutes regardless of anything else!  The
     options for reset are:

        1) RESET_ANYHOW -- Resets as often as specified by the lifespan
           call, no matter what else is going on.
        2) RESET_NOT -- Resets only when the mud is rebooted.
        3) RESET_IFEMPTY -- Resets only if the zone is empty.

     (NOTE) Generally the only zones which reset quickly are newbie zones.
     It is recommended that a zone reset time of at least 20 minutes is
     used,  If you need to make an exception please let us know, and
     explain why a quick reset is important.

   creators {"icculus", "venger"}

     Believe it or not, the format of this is important also!  The names
     must be in lowercase or the correct names will not be registered.
     There are certain objects available to immortal designers which help
     debug and modify areas to meet player suggestions.  These objects
     make sure the person using them is one of the names in the creators
     field, so make sure you use all lowercase, and add everyone who had a
     part in it!

   notes "blah blah blah..."

     Whatever is put within the quotation marks for notes is information
     that can be accessed by immortal characters using the wstat command.
     The notes section is a good place to put your e-mail address and any
     other information which other zone builders should know.

   help "blah blah blah..."

     The information put within the quotation marks for help is information
     that players will see when they are in your zone and type 'help'.  Try
     to include a brief overview of your zone here, as well as anything
     else you think players should know about your zone.

   (NOTE) The room, mobile and object definitions which follow were
     originally written using Icculus' specific style (With exception
     to Tiamat which is Chris Armstrong's style), and slightly modified
     by Kira.  There is a great deal of flexibility involved here and
     you can make up your own format for definitions.  The only thing of
     importance here is that you start every definition with its
     symbolic_name (on its own line!) and end the definition with the
     word 'end' on a line by itself.
*/

/*   ***********************************************************   */


%rooms

                        cluttered_room
names {"cluttered room"}
title "A Cluttered Room"
descr
"   You have entered a very cluttered room, in fact you find difficulty
in finding an empty place to stand!  Scattered all about you are various
maps made recently by explorers, as well as assorted trinkets from around
the globe.  You notice an exit north, which appears to lead to Midgaard,
and something looking like a hinge on the floor at your feet."

extra {"various maps", "maps", "map"}
"Newly received information allowed for these maps to be made. Though many
died to ensure safe transport of this information, the contents will prove
their value in time!"

extra {"assorted trinkets", "trinkets", "trinket"}
"All sorts of neat stuff it seems, you feel like a little child as you
gaze in wonder at the plethora of fun looking toys. *sigh* It sure brings
back the days when life was easier!"

extra {"hinges", "hinge"}
"Looks like there may be a hidden exit here! Could this be a trapdoor?"

flags {UNIT_FL_NO_TELEPORT, UNIT_FL_INDOORS, UNIT_FL_NO_WEATHER}
movement SECT_INSIDE
north to midgaard/market_sq descr "The amazing city of Midgaard is there";
down to death_room open {EX_OPEN_CLOSE, EX_CLOSED, EX_LOCKED, EX_HIDDEN}
	key death_key keyword {"trapdoor", "door", "hinge", "floor"};
SECRET_DOOR_DIFFICULTY(DOWN, 10)
ALWAYS_LIGHT
end   /* cluttered_room */


/*   ***********************************************************   */

/*
   %rooms

     Like the %zone label, this label tells the compiler that we are going
     to define the rooms in this section of the program.

   cluttered_room

     This name will be the symbolic name of the room that we just made.  It
     is important that the first line of a room definition has this symbolic
     name on a line by itself.  To refer to this room in any dil program or
     on the mud you can use the symbolic format.  That is, for this room,
     cluttered_room@tiny_zone is the way to refer to it.

   names {"cluttered room"}

     This command defines the name of the room that would be used if you
     were, for example, trying to teleport to the room.  This field is not
     required, and can be left out unless you feel that the room is in some
     way special, that is, rooms that will be well traveled.  If you wanted
     to define more than one name for this room, you could do it in the
     following manner:

        names {"cluttered room", "messy room"}

     Thus, this room could now be teleported to using either 'cluttered
     room' or 'messy room' as the keyword.  Gods can also use these names
     with the 'goto' command, which believe me is much nicer than using
     the symbolic format repeatedly. 

     (NOTE) You should follow this simple convention for name-lists:  Put
     all names which are a subset of others later in the list, following
     their superset.  For example, in a room named 'The Room of Light
     Magic' the namelist could look like this: 

        names {"room of light magic", "room of light", "room of magic"}

     It may not seem important, but due to the way namelists are searched
     it does turn out to be.

   title "A Cluttered Room"

     The title is what players see as they enter the room.  The title acts
     like a room name as far as mortals are concerned so keep this in mind
     before choosing obscure titles!

   descr "blah blah blah..."

     The descr is what you will see when you walk into a room (provided you
     aren't in brief mode).  This description is basically the room layout,
     or as much of it as is given to the mortals inside.  Room descriptions
     are possibly the most important aspect of any zone, for no matter how
     great the equipment is inside, if the room descriptions are not well
     thought out, the players lose interest and the zone loses its link!

   extra {"blah-blah blah", "blah-blah", "blah"}

     The extra descriptions are used in conjunction with the room
     description.  If you describe something within the room description,
     you MUST make an extra description for that item.  I warn you, this is
     very, very tedious for large zones, but the logic is simple to see why
     they must be there.  If I enter a room and the description says 'You
     see an ugly rug in the corner.', chances are I will type 'look rug' to
     get a closer inspection.  If there is not an extra description defined
     for the rug, the mud will tell me 'You do not see that here' when it
     just told me it was there a second ago!  So there must be an extra
     description defined for everything mentioned in room descriptions.

     (NOTE) As with name-lists, all items in an extra description which are
     subsets of other items should be put later in the list.  For example,
     if you want to create an extra description for the keywords 'various
     maps', 'maps', and 'map', you would enter it as follows:

        extra {"various maps", "maps", "map"}
          
   flags {UNIT_FL_NO_TELEPORT, UNIT_FL_INDOORS, UNIT_FL_NO_WEATHER}

     Several flags for rooms are defined in values.h.  Flags on rooms act as
     little extras to make our rooms more interesting.  Our room will forbid
     teleporting, will be indoors, and will not give players information
     about the weather.  Some flags which you can use are:

        1) UNIT_FL_NO_TELEPORT -- Prevents teleporting to/from the room.
        2) UNIT_FL_NO_MOB -- Prevents wandering mobs from wandering into
           the room.
        3) UNIT_FL_NO_WEATHER -- Players in the room won't get weather
           information.  Use this flag on indoor/underground rooms.
        4) UNIT_FL_INDOORS -- Set this flag if the room is not an open-air
           room, such as a cave or in a building.

   movement SECT_INSIDE

     This line tells the mud how much endurance each move should cost when
     leaving the room.  There are many to choose from although some appear
     to be disabled.  The complete list of sector types is in values.h and
     you can try them all.  If the compiler gives you parse errors on any
     sector type, it means it is disabled and you should try another.
     Here's a partial lists of sector types that are available:

        1) SECT_CITY
        2) SECT_FIELD
        3) SECT_FOREST
        4) SECT_MOUNTAINS
        5) SECT_SWAMP
        6) SECT_WATER_SAIL -- A boat is needed to move in this type of room.

   north to midgaard/market_sq descr "The amazing city of Midgaard is there";

     This line is the standard method of defining a room connection from
     one zone to another.  In this case, going north will take you from
     cluttered_room@tiny_zone to the market square of Midgaard.  If you
     wish to connect a room in your zone to an existing room of some other
     zone, you will need to find out its symbolic name and reference it
     using the format shown (zone_name/room_name).  To connect rooms that
     are in the same zone you can simply use the symbolic room name.  For
     example, if we were connecting a room within tiny_zone to
     cluttered_room, we might write:

        east to cluttered_room descr "A very messy room is there.";

     The descr which follows this connection definition is a description
     that will be seen when someone in the room types 'look east'.  While
     these descriptions are not necessary, it is reccommended that you
     include them.

   down to death_room open {EX_OPEN_CLOSE, EX_CLOSED, EX_LOCKED, EX_HIDDEN}
	key death_key keyword {"trapdoor", "door", "hinge", "floor"};
   SECRET_DOOR_DIFFICULTY(DOWN, 10)

     These three lines describe just one thing, a hidden trapdoor which
     leads down to a room with symbolic name death_room.  The key things to
     notice are the open flags, the keyword section, and only in cases of
     hidden doors, the level of search required to find this door.

     The open flags are what tells the mud that the exit is in fact a door
     and, in our example, we also make it closed, locked, and hidden on
     reset (means players must search to locate it).  EX_OPEN_ClOSE defines
     a door, EX_CLOSED and EX_LOCKED tell the mud to close and lock the
     door on reset, while EX_HIDDEN tells the mud that this door should be
     hidden to all players who haven't searched and found it.

     The 'key death_key' line means that only the key with symbolic name
     death_key will unlock this door.  A key is not necessary for doors
     (since many can pick locks or cast unlock) but if you wish, you can
     define one with 'key key_name' which is specific for the door.  We must
     now remember to write the definition for the death_key, which will be
     done in the %objects section.  To make a door pickproof, set the
     EX_PICKPROOF flag on it.

     The list of names under 'keyword' defines the things that a player can
     search for to successfully find the door.  For doors that are not
     hidden, this list acts like a namelist and defines what the player can
     look at to see the door.

     (NOTE) For doors that are not hidden, a descr "blah blah" must also be
     added so that the command 'look door' will yield results.  For example:

        east to death_room open {EX_OPEN_CLOSE}
           descr "There is a door here." keyword {"door"};

     Because our door is hidden, the description has been left out.  The
     keywords then become the list of things a player can search for to find
     the door.  The first name in this list defines what the player will see
     if they do in fact find the door.  For example, if I type 'search
     hinge' and am successful, I will receive a message saying 'You discover
     a hidden trapdoor'.  Additionally, a comment from Papi is that with all
     secret exits, you should include the surface which the exit is located
     on within the keyword list, ie floor, wall, ceiling, etc. should be one
     of the keywords.

     The SECRET_DOOR_DIFFICULTY specifies the exit direction (in case of
     more than one hidden exit) and the 'skill level' required to search
     out the exit, in our case level 10.  This does not mean players below
     level 10 cannot search here, it means players with a search skill
     comparable to level 10 have a good chance at success.  Remember it
     only takes one successful search so really anyone can get lucky and
     find the exit, but levels 10 and up can do it consistently.

   ALWAYS_LIGHT

     This line defines the light for the room.  In this case, the room will
     always be well lit.

   end 

     End defines the end of the room.  The additional comment, signifying
     which room was just defined, has been added for aesthetics.
*/

/*   ***********************************************************   */


                        safe_room
names {"safe room"}
title "Alta's Sanctuary"
descr
"  The sanctuary, although bare, seems to emite a feeling of safety and
serenity. A large stone alter at the far end of the room has a beautiful,
female warrior carved into it."


extra {"alter"}
"The alter is made from stone and has a beautiful female warrior carved
into it. The alter seems to emite some sort of power. As well as a feeling
of peace and serenity."

flags {UNIT_FL_INDOORS, UNIT_FL_NO_WEATHER}
movement SECT_INSIDE
up to cluttered_room open {EX_OPEN_CLOSE, EX_CLOSED}
	descr "An odd looking door can be seen at the top of a flight of stairs." 
         keyword {"door"};
dilcopy safe_room@function();
end   /* safe_room */


/*   ***********************************************************   */

/*
   (NOTE) Since much of the coding for this room is the same as what was
     explained for cluttered_room, only the new ideas that are here will
     be discussed.

   up to cluttered_room open {EX_OPEN_CLOSE, EX_CLOSED}
	descr "There is a door here." keyword {"door"};

     As was described for cluttered_room, this is the way to make a door
     that is not hidden.  Since anyone who is in this room would have
     obviously already found the hidden door, we do not make this door
     hidden, thus saving players the trouble of having to search for a door
     that they've already found.  Things to notice about the description of
     a door that isn't hidden are:

        1) The EX_HIDDEN flag is not set.
        2) A descr of this door has been added, allowing players to 'look
           door'.  Additionally, if you open or close the door you will get
           the message 'You open the door.'  If you wanted to make a gate
           instead of a door, you could change the descr and set the first
           keyword to "gate".  When you opened the gate you would then get
           the message 'You open the gate.'
           
     (NOTE) You should take CAREFUL notice that every exit statement must
     end with a semicolon (;). I have found that about 80% of the parse
     errors I get from zone compilations are due to either forgetting a
     semicolon, or forgetting a " in an extra description.

    dilcopy safe_room@function();

     This line is for special effects in the room.  There are many of
     these, check in function zon to see a full list.  Special assignments   
     can be used for rooms, mobiles, and objects. The dilcopy 
     safe_room@function(); says that this room will be a safe room. That
     means no player killing can occure in this room. Please note that the
     dilcopy must end in a semicolon. 


        romflags {ROOM_FL_SACRED}

   (NOTE) No light value has been defined for this room, so it should be
     dark always.
*/

/*   ***********************************************************   */


%mobiles

                        dragon_tiamat
names {"tiamat", "dragon"}
title "Tiamat"
descr "Tiamat, the Queen of all evil dragonkind is here."
extra {}
"Tiamat is the most powerful evil dragon known to exist.  Her massive body
is topped with the heads of all five of her guardian dragons.  Her claws are
huge, and her scales are multi-colored.  She has come to this place to spawn
evil dragons and obviously does not like your presence.  In a way, this dragon
is very beautiful in all of her splendor, but at the same time, the sheer evil
of this beast could make the strongest warrior cower in fear."

level 160
alignment -1000
race RACE_DRAGON_GREEN
sex SEX_FEMALE
height 2650
weight 5300
money 4 PLATINUM_PIECE
exp 50
NATURAL_DEF(WPN_CLAW, ARM_PLATE)
MSET_ABILITY(18,15,16,19,9,14,9,0)
MSET_WEAPON(4,5,4,4,9,4)
MSET_SPELL(1,1,1,1,1,1,11,20,11,11,11)
dilcopy combat_mag@function(fire breath, heal, 25, 2)
romflags {CHAR_DETECT_INVISIBLE}
end   /* dragon_tiamat */


/*   ***********************************************************   */

/*
   %mobiles

     Like the %zone and %rooms labels, this label tells the compiler that we
     will be defining mobs in this section of the program.

   dragon_tiamat

     Like a room name, this line is the symbolic name of the mob which we
     are defining.  This name must be on a line by itself.  When referring
     to Tiamat symbolically, we can now refer to dragon_tiamat@tiny_zone.

   names {"tiamat", "dragon"}

     Just like the room names.  These are useful for teleports or gotos.

   descr "Tiamat, the Queen of all evil dragonkind is here."

     This description is what a player sees when he/she walks into a room.

   extra {} "blah blah blah..."

     The 'extra {}' line is a way of allowing players to 'look tiamat'.
     Whenever anyone types either 'look tiamat' or 'look dragon', they will
     see this description.  The fact that there is nothing between the {
     and } signifies that it is an extra description on the entire mobile.

   level 160

     Self-explanatory.  Tiamat is a level 160 mob.  Not for newbies...

   alignment -1000

     This is the alignment of Tiamat.  -1000 is as evil as a creature can be.
     -350 to 350 is neutral, while 350 to 1000 is considered good.

   race RACE_DRAGON_GREEN

     This is the race of Tiamat.  Values.h contains the complete list of
     possible races.

     (NOTE Added by PAPI)  If you encounter a race which is non-existant,
     please add it yourself by using "#define RACE_LOBSTER nnnn" where
     nnnn is a number that is UNUSED in values.h for RACE_XXX.  Then later
     the administrators will insert it into values.h.  At that point you
     will get a "warning: ... redefined".  When this happens, simply erase
     your own definitions as they are now a part of values.h

   sex SEX_FEMALE

     Hopefully this won't need to be explained to you (*grin*)  There are
     three sexes to choose from:

        1) SEX_FEMALE
        2) SEX_MALE
        3) SEX_NEUTRAL

   height 2650

     The height of a mob will take some getting used to unless you are a wiz
     with the metric system.  Height is in centimeters, so Tiamat will have
     a height of 2.65 meters, or about nine feet.

   weight 5300

     Weight is given in pounds.  Weight will have an effect on the maximum
     damage that a mob can do using a natural attack (such as fist or claw).

   money 4 PLATINUM_PIECE

     We load her with 4 platinum pieces on every zone reset.

   exp 150

     Players who kill Tiamat will receive 50% experience bonus.  Thus,
     killing Tiamat will give you 50% more experience than what you would
     get from killing a lvl 160 mob without an experience bonus.  There are
     some guidelines for this that you must follow which you can read about
     in the mobiles.ans doc. 100 is the base experience. IE for NO
     experience bonus you would set your mob to  exp 100 this gives them
     100% of the experience for that level mob. For LESS experience bonus
     you would set your mob to under 100 exp 75 would give 75% of the
     normal experiance. For MORE experience you set the bonus to over 100.
     exp 150 would give the mob 150% of the normal experiance for that
     level mob.

   NATURAL_DEF(WPN_CLAW, ARM_PLATE)

     This line defines the mobiles' natural attack and defense types, which
     figures into battle accordingly.  The natural attack type will specify
     which battle messages get sent, i.e. for a natural attack type WPN_CLAW
     we can expect to see messages like 'Tiamat slashes you with her claws',
     rather than something which would make no sense like 'Tiamat pounds you
     with her fists'.  The various possibilities for natural attacks are all
     listed in values.h.  Some of the more common ones are:

        1) WPN_FIST
        2) WPN_BITE
        3) WPN_CLAW
        4) WPN_STING

     The natural armor type determines how tough the mobiles' skin will be,
     ie what type of armor is best comparable to her skin.  She is a dragon,
     dragons have scales and since we want her to be rather 'thick skinned',
     she deserves the best, namely ARM_PLATE.  The possible values for
     natural armor are:

        1) ARM_CLOTHES -- The weakest of the five.
        2) ARM_LEATHER
        3) ARM_HLEATHER
        4) ARM_CHAIN
        5) ARM_PLATE -- The toughest of the five.

   MSET_ABILITY(18,15,16,19,9,14,9,0)
   MSET_WEAPON(4,5,4,4,9,4)
   MSET_SPELL(1,1,1,1,1,1,11,20,11,11,11)

     The MSET_ listings are what tell the mud exactly what Tiamat's stats
     are going to be.  The numbers in MSET_ definitions define the following
     abilities, weapon skills, and spell skills:

        MSET_ABILITY(str,dex,con,hpp,bra,cha,mag,div)
        MSET_WEAPON(axe_ham,sword, club_mace,flail_pole,unarmed,special)
        MSET_SPELL(div, pro,det,sum,cre,min,hea,col,cel,int,ext)

     Please note that the total of all abilities MUST add up to exactly 100,
     and the total value for weapon skills and spell skills COMBINED must
     also add to 100.  These numbers are interpreted internally along with
     the mob's level to determine the mob's actual stats.  A value of 20 in
     any skill/ability on a 200 level mob will correspond to an actual
     skill/ability level of 200.  Similarly, a 20 skill/ability on a 100
     level mob will correspond to an actual skill/ability of 100.

     The MSET_ definitions as well as all of the other information needed to
     create a mob is explained in greater detail in the monsters.ans doc.
     Please check that doc if you have any questions.

   (NOTE) In composed.h are the definitions of many, many types of mobs.
     Thus, if you do not feel like programming the MSET_'s, NATURAL_DEF,
     alignment, etc., you could simply use a pre-defined macro.  For
     example, we could replace all of the lines from 'level 160' through
     'MSET_SPELL' with the following line:

        M_DRAGON_GREEN(160,SEX_FEMALE)

     This call would do exactly the same thing as the twelve lines which we
     entered by using the information contained in the M_DRAGON_GREEN macro
     in composed.h (The level 160 and sex SEX_FEMALE serve as arguments
     here, telling the mud that we want a female, level 160 green dragon).

     In general, we are trying to slowly add a steady base of macros to the
     composed.h file so try to get into the habit of using what is already
     defined whenever possible.

    dilcopy combat_mag@function(fire breath, heal, 25, 2)

   This allow the mob to act in a special way. This particular one will
   cast fire breath  on its enemy and heal on its self when it gets to 25%
   of hits hit points every 2 rounds of combat.

   romflags {CHAR_DETECT_INVISIBLE}

     The romflag list can be found in values.h.  Romflags define what
     character abilities the mobile may have.  CHAR_DETECT_INVISIBLE gives
     Tiamat the ability to see players even if they are invisible.  Other
     useful romflags include:

        1) CHAR_PROTECTED -- The mob will be protected by the law.
        2) CHAR_HIDE -- The mob will be hidden.
        3) CHAR_SNEAK -- The mob will be in sneaking mode.
        4) CHAR_DETECT_INVISIBLE -- The mob can see invisible players.
        5) CHAR_WIMPY -- The mob flees from combat when its hp is low.

    end

     The 'end' tag signifies that we have finished our definition of the
     specific mob.  The added comment is there merely for aesthetics.
*/

/*   ***********************************************************   */


                        human_sacrifice
names {"human sacrifice", "sacrifice", "human"}
title "A human sacrifice"
descr "A human sacrifice waits here for his death."
extra {}
"   He looks very gaunt, almost to the point of starvation.  His bones 
show clearly through the skin and you can tell its been very long since
his last meal.  There are tattoos all over his arms and legs, all seem
to be of a dragon, one which you recognize as the dragon Queen."

M_HUMAN_WARRIOR_SWORD(50,SEX_MALE)
money 1 COPPER_PIECE

/*  Dil to make the sacrifice 'sacrifice' himself */
dilbegin sacrifice1();
code {
  :init:
    heartbeat := PULSE_SEC*20;
    on_activation((self.position <= POSITION_SLEEPING) or
         (self.position == POSITION_FIGHTING), skip);
  :start:
    exec("emote shifts uneasily, obviously he is nervous.", self); pause;
    exec("say My time has come now, pity me not my friend, it was a "+
         "choice that I had to make.", self); pause;
    exec("ponder", self); pause;
    exec("emote gathers his wits and gets ready to do his master's "+
         "bidding.", self); pause;
    exec("sigh", self); pause;
    exec("wave", self); pause;
    exec("say I must feed my master Tiamat now, goodbye life!", self); pause;
    exec("search trapdoor", self);
    exec("unlock trapdoor", self);
    exec("open trapdoor", self);
    walkto(findroom("death_room@tiny_zone"));
    pause;
    goto init;
}
dilend
end   /* human_sacrifice */


/*   ***********************************************************   */

/*
   (NOTE) Since much of the coding for this mobile is the same as what was
     explained for dragon_tiamat, only the new ideas that are here will
     be discussed.

   M_HUMAN_WARRIOR_SWORD(50,SEX_MALE)

     This call is a predefined macro in composed.h.  Notice that a great
     deal of coding that was necessary for Tiamat is not needed here.
     When using these predefined macros, you may override any setting by
     entering your own values on any line following the macro call.  For
     example, if we wanted the alignment of our human sacrifice to be -800,
     we could do so in the following manner:

        M_HUMAN_WARRIOR_SWORD(50,SEX_MALE)
        alignment -800

   dilbegin sacrifice1(); ...

     Here's a simple dil program which I've named 'sacrifice1'.  This
     program will cause the human sacrifice to talk to you when he loads,
     and then walk to the death_room.  Dil is explained in other docs,
     and I'm not going to go into it in detail here, but this program is
     simple enough that it can be easily modified to allow you to create
     'talking' mobiles within your zone.

     The PULSE_SEC*20 defines how long a pause will last, in this case 20
     seconds.  So the program will wait for 20 seconds everytime it sees
     a pause.  You can set this number to any value that you want.

     The 'exec' command tells the program what we want the mob to do.
     Effectively, anything we put in the quotes in an exec statement is
     like a line that you would type in when playing.  So if we want the
     mob to say 'Hello' we use the following:

        exec ("say Hello.", self);

     Emotes, socials, etc. can be used within exec statements.

     The 'walkto' command tells the mob to walk to the specified room.

     Finally, the 'goto init' line tells the program to go back to our
     ':init:' label at the beginning.  Thus, if you wanted to make a mobile
     that just kept talking, you would put 'goto init' at the end of your
     program, and the program would then go back to the beginning and
     effectively start itself all over again.

     Feel free to copy this program into your own zone... just change the
     text within the quotes to whatever is appropriate for you.  Little
     extras like these programs are what help to distinguish an average
     zone from a good one.
*/

/*   ***********************************************************   */


%objects

                        sacrifice_robe
names {"sacrificial robe", "robe"}
title "a sacrificial robe"
descr "A dark black sacrificial robe lies here."
extra {}
"This robe is made of a very fine and delicate silken material.  However,
you feel uneasy looking at it... the robe seems meant only for those who are
preparing to die!"
extra {"$identify"}
"When worn,an enhanced dexterity is attained, but your knowledge
of magic will weaken slightly."
extra {"$improved identify}
"When worn, this robe will add 3 to DEX, and reduce DIV by 1.  You will
also receive a bonus in the war mattock skill."

manipulate {MANIPULATE_TAKE, MANIPULATE_WEAR_ABOUT}
flags {UNIT_FL_MAGIC}
ARMOUR_FULL_PLATE(+15, +15)
DEX_TRANSFER(+3)
DIV_TRANSFER(-1)
WEAPON_TRANSFER(WPN_WAR_MATTOCK, 25)
weight 12
cost 3 GOLD_PIECE
rent 1 GOLD_PIECE
dilcopy level_restrict@function (45,0,25,"");
dilcopy abi_restrict@function (ABIL_DEX,30,0,25,"");

end   /* sacrifice_robe */


/*   ***********************************************************   */

/*
   %objects

     Like %rooms and %zone, this is the label that tells the compiler we
     will be defining items now.

   sacrifice_robe

     This is the name of the item which we are defining.  It must be placed
     on a line of its own.

   names {"sacrificial robe", "robe"}

     These are the names for the robe.  If we wanted to wear this robe, we
     would type either 'wear sacrificial robe' or 'wear robe'.

   title "a sacrificial robe"

     The title is what it claims to be, the title of the object.

   extra {} "blah blah blah"

     Like with a mob, this is an extra defined for the entire object.  So
     if a player types 'look robe', this description is what they will see.

   extra {"$identify"} "blah blah blah"

     This extra is used with the identify spell.  When a player casts
     'identify robe', this is the description that they will be given.

   extra {"$improved identify} "blah blah blah"

     Like the extra for the identify spell, this extra provides information
     for use with the improved identify spell.  Generally you want to give
     more detailed information with improved identify than with identify,
     such as perhaps craftsmanship, armor type, or the specific ability
     bonuses provided by the object.

   manipulate {MANIPULATE_TAKE, MANIPULATE_WEAR_ABOUT}

     The manipulate statement defines all of the possible ways for this
     particular item to be worn, held or taken.  The list is in values.h
     and each one is described.  For this robe, it is takeable (very
     important for anything you want to not be bolted to the floor!) and it
     can be worn about the body, which means over any armor you wear
     already.  There are of course all of the body parts defined for the
     manipulate command so all you need to do is pour over values.h.
     
   flags {UNIT_FL_MAGIC}

     This flag sets the item as a magic item... basically all that this
     means is that when using detect magic, this item will be detected.

   ARMOUR_FULL_PLATE(+15, +15)

     The armor defs are all defined in great detail in objects.ans, I will
     not go over these and I suggest that you scan the section on armors in
     your doc.  Please note that the European spelling of armor is used here;
     it took me a week to figure out why I was getting a parse error on this
     one when I was programming my first zone.

   DEX_TRANSFER(+3)
   DIV_TRANSFER(-1)
   WEAPON_TRANSFER(WPN_WAR_MATTOCK, 10)

     Ok, this is how to make your objects actually transfer abilities and/or
     skills to a player.  In this case we are giving the player a plus three
     bonus in dexterity, taking away one in divine, and increasing the
     player's war mattock skill by 10%.  SPELL_TRANSFER and SKILL_TRANSFER
     are also available.

     (NOTE) There are limits as to what you can transfer, typically the
     limit is +7 max on the total abilities transferred.  Any excesses
     require deductions in other ability fields.  There is currently no
     minimum transfer amount. *grin*

   weight 12

     Weight is given in pounds and should be self-explanatory otherwise.

   cost 3 GOLD_PIECE

     Cost refers to the sell back value of the object.  In this case
     the value of the object is three gold pieces.

   rent 1 GOLD_PIECE
   
     The rent is the per day charge to store this item, one gold piece in
     this case.

dilcopy level_restrict@function (45,0,25,"");
dilcopy abi_restrict@function (ABIL_DEX,30,0,25,"");
 
    This restricts the item to a level 45 player with a minimum of 30
    dexterity. Read restrict.txt for a complete list of each restrict and
    how they are used.
*/

/*   ***********************************************************   */


                        death_key
names {"death key","key"}
title "the Key to Death (Tiamat)"
descr "A blood red key is here."
extra {}
"This key has an inscription of a dragon's head. It looks very
old and perhaps you should take care not to lose it."

type ITEM_KEY
manipulate {MANIPULATE_TAKE, MANIPULATE_HOLD}
cost 3 IRON_PIECE
weight 1
end   /* death_key */


/*   ***********************************************************   */

/*
   (NOTE) Since much of the code for the following items is the same as
     what was explained for sacrifice_robe, only the new ideas that are
     here will be discussed.

   type ITEM_KEY

     One thing of semi-importance in this definition is the type ITEM_KEY
     statement, but as it turns out this is not a necessity.  That is the
     mud will allow other items to 'unlock' locks!  Item types are listed
     in values.h

   (NOTE) As you can see there is not too much involved with making a key.
     Do make sure that the symbolic name here (death_key) is the same as
     what you define for the door, also named death_key; otherwise the
     key will not work for the door.
*/

/*   ***********************************************************   */


                        ugly_sword
names {"ugly sword", "sword"}
title "an ugly sword"
descr "An ugly sword has been left here"
extra{}
"This sword bears the mark of Tiamat, the wielder must be a human sacrifice
in the last days of his life."

manipulate {MANIPULATE_TAKE, MANIPULATE_WIELD}
WEAPON_DEF(WPN_LONG_SWORD, +5, +5)
WEAPON_SLAYER(RACE_HUMAN)
weight 25
cost 1 SILVER_PIECE
rent 1 SILVER_PIECE 
end   /* ugly_sword */


/*   ***********************************************************   */

/*
   WEAPON_DEF(WPN_LONG_SWORD, +5, +5)

     This WEAPON_DEF can be read about in the objects.ans file so we will
     not delve into it, but this sword turns out to be pretty decent overall.

   WEAPON_SLAYER(RACE_HUMAN)

     This command defines one race for which the weapon will do extra
     damage.  This WEAPON_SLAYER call can only define one slaying race, and
     if you try to put more than one of these calls, only the last one gets
     acknowledged.  The slaying race is mostly a feature and should only be
     put on swords of high value.
*/

/*   ***********************************************************   */


                        gnarled_sign     
names {"gnarled sign", "sign"}
title "the gnarled sign"
descr "A gnarled sign is here."
extra {}
"&lThe sign reads:

        'Beware those who explore this zone!  While the zone
        might be tiny in size, the mobs which you may find
        here are anything but tiny!  It is rumored that even
        the Queen of the dragons has taken up residence within
        the boundaries of the tiny zone...'"
weight 100
type ITEM_NOTE
end    /* gnarled_sign */


/*   ***********************************************************   */

/*
   (NOTE) One very important aspect of this sign is the '&l' that is the
     first item inside of the extra description.  '&l' is a useful way
     to format data -- if you put &l as the first character within
     quotation marks, however you type in this information is how it will
     appear on the screen.  The mud will automatically format most text, so
     this operator acts to suppress the mud's normal formatting.

   type ITEM_NOTE

     A note is just another of the items defined in values.h.  Letters,
     signs, and so forth should be of this item type.
*/

/*   ***********************************************************   */


%reset

door cluttered_room DOWN {EX_OPEN_CLOSE, EX_CLOSED, EX_LOCKED, EX_HIDDEN}
door death_room UP {EX_OPEN_CLOSE, EX_CLOSED}

load human_sacrifice into cluttered_room max 1
  {
     equip blue_robe position WEAR_ABOUT
     equip ugly_sword position WEAR_WIELD
     load death_key
  }

load tiamat into death_room local 1

%end

/*   ***********************************************************   */

/*
   %reset

     This call labels the reset section and tells the compiler that we
     will be defining how the zone resets.  The file dmc.n contains
     extensive information about zone resets.

   door cluttered_room DOWN {EX_OPEN_CLOSE, EX_CLOSED, EX_LOCKED, EX_HIDDEN}
   door death_room UP {EX_OPEN_CLOSE, EX_CLOSED}

     These two lines define how the ONE door works which seperates the two
     rooms named here. In general, you will always need two door statments
     for every one door you want.  The syntax for a door statement is:

        door room_name direction {open flags go here}

     Direction can be (UP, DOWN, NORTH, SOUTH, EAST, WEST), and the open
     flags are the same as defined in the room definition.  So you see to
     make one door, you need to define it in each room it will be in, thus
     giving a single door two door resets.

   load human_sacrifice into cluttered_room max 1
     {
        equip blue_robe position WEAR_ABOUT
        equip ugly_sword position WEAR_WIELD
        load death_key
     }

     Each zone reset we try to load human_sacrifice into cluttered_room.
     The 'max 1' label says that there may be only one human_sacrifice
     in the game at any time, thus if there is already one somewhere else,
     a new one will not be loaded.  If we had specified max 3, then as
     long as there were 0, 1, or 2 such sacrifices in the world, another
     would be loaded on this zone's reset.

     We equip the sacrifice with his robe and sword, each being worn at
     the respective location.  The death key is also loaded into his
     inventory at each zone reset.  If you wished to limit the number of,
     say, ugly_sword in the game, you could also specify a 'max' value on
     the sword.  Thus, if you set the max at five and there were already
     five in the game, the human_sacrifice would load without the sword.

   load tiamat into death_room local 1

     Tiamat has nothing to load or wear, but you notice we use local 1
     rather than max 1.  This means if there is a Tiamat anywhere else in
     the world, we can load her here, but if any other Tiamats occupy this
     room, there will not be another loaded.  Can you imagine more than one
     Tiamat in any room anyhow? *shiver*

   %end

     One last label, the %end label tells the compiler that it has reached
     the end of your zone file.  That's all!
*/

/*   ***********************************************************   */

I hope this guide helps tie up some of the loose ends with what you got out
of the other docs.  Keep the other docs handy always, as you will undoubtedly
come across something new you wish to try and periodically check the ftp
site for new versions, they do pop up often believe it or not!  Happy
creating! (Iccy)(& Kira too!)
